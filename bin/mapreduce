#!/bin/bash
#
# mapreduce
#
# Stop on errors
set -Eeuo pipefail

start() {
  if pgrep -f mapreduce-manager &> /dev/null; then
    echo "Error: mapreduce-manager is already running"
    exit 1
  elif pgrep -f mapreduce-worker &> /dev/null; then
    echo "Error: mapreduce-worker is already running"
    exit 1
  else
    echo "starting mapreduce ..."
    mapreduce-manager --host localhost --port 6000 --hb-port 5999 &
    sleep 2
    mapreduce-worker --host localhost --port 6001 --manager-host localhost --manager-port 6000 --manager-hb-port 5999 &
    mapreduce-worker --host localhost --port 6002 --manager-host localhost --manager-port 6000 --manager-hb-port 5999 &
  fi
}

stop() {
  echo "stopping mapreduce ..."
  set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
  if nc -h 2>&1 | grep -q "\-c"; then
    NC="nc -c"
  elif nc -h 2>&1 | grep -q "\-N"; then
    NC="nc -N"
  elif nc -h 2>&1 | grep -q "\-C"; then
    NC="nc -C"
  else
    echo "Error detecting netcat version."
    exit 1
  fi
  set -o pipefail
  echo '{"message_type": "shutdown"}' | $NC localhost 6000 || true
  sleep 2  # give the manager time to receive signal and send to workers
  if pgrep -f mapreduce-manager &> /dev/null; then
    echo "killing mapreduce manager ..."
    pkill -f mapreduce-manager || true
  fi
  if pgrep -f mapreduce-worker &> /dev/null; then
    echo "killing mapreduce worker ..."
    pkill -f mapreduce-worker || true
  fi
}

status() {
  if pgrep -f mapreduce-manager &> /dev/null; then
    echo "manager running"
    manager_running=true
  else
    echo "manager not running"
    manager_running=false
  fi
  if pgrep -f mapreduce-worker &> /dev/null; then
    echo "workers running"
    worker_running=true
  else
    echo "workers not running"
    worker_running=false
  fi
  if [ "$manager_running" = true ] && [ "$worker_running" = true ]; then
    exit 0
  else
    exit 1
  fi
}

if [ $# -ne 1 ]; then
  exit 1
fi

# Parse argument.  $1 is the first argument
case $1 in
  "start")
    start
    ;;

  "stop")
    # Detect GNU vs BSD netcat. We need netcat to close the connection after
    # sending a message, which requires different options.
    stop
    ;;

  "status")
    status
    ;;

  "restart")
    stop
    start
    ;;
esac
